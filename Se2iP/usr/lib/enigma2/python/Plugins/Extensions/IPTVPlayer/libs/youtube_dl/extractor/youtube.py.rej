--- libs/youtube_dl/extractor/youtube.py	2019-06-06 06:20:34.242316591 +0200
+++ enigma2-pc/e2iplayerGITsSources/forks/e2iplayer-Mosz_Nowy/IPTVPlayer/libs/youtube_dl/extractor/youtube.py	2019-05-04 06:55:20.993337046 +0200
@@ -54,9 +54,8 @@
         tmp = ph.find(data, 'yt.akamaized.net', '}', 0)[1]
         if tmp:
             printDBG("DATA: %s" % tmp)
-            tmp = ph.rfindall(tmp, 'return', '.set(', flags=0)
+            tmp = ph.rfindall(tmp, 'return', '.set(b,encodeURIComponent', flags=0)
             for name in tmp:
-                name = name.replace('decodeURIComponent(', '').replace('encodeURIComponent(', '')
                 printDBG("ITEM: %s" % name)
                 name = ph.search(name, self.RE_MAIN)[0]
                 if name: return name
@@ -201,7 +200,6 @@
                           # Dash video
                           '138', '137', '248', '136', '247', '135', '246',
                           '245', '244', '134', '243', '133', '242', '160','298','299',
-                          '313', '271',
                           # Dash audio
                           '141', '172', '140', '171', '139',
                           ]
@@ -287,8 +285,6 @@
         '246': 'webm',
         '247': 'webm',
         '248': 'webm',
-        '271': 'webmv', 
-        '313': 'webmv', 
 
         'mpd': 'mpd'
     }
@@ -343,8 +339,6 @@
         '248': '1080p',
         '298': '720p60',
         '299': '1080p60',
-        '271': '1440p', 
-        '313': '2160p',
     }
 
     _special_itags = {
@@ -376,8 +370,6 @@
         '248': 'DASH Video',
         '298': 'DASH Video',
         '299': 'DASH Video',
-        '271': 'DASH Video', 
-        '313': 'DASH Video',
     }
     IE_NAME = u'youtube'
 
@@ -501,7 +493,7 @@
         printDBG(sub_tracks)
         return sub_tracks
 
-    def _real_extract(self, url, allowVP9 = False):
+    def _real_extract(self, url):
         # Extract original video URL from URL with redirection, like age verification, using next_url parameter
         mobj = re.search(self._NEXT_URL_RE, url)
         if mobj:
@@ -549,6 +541,7 @@
                 video_info_url = videoInfoBase + ('%s&ps=default&eurl=&gl=US&hl=en'% ( el_type))
                 sts, video_info = self.cm.getPage(video_info_url, videoInfoparams)
                 if not sts: continue
+                #printDBG( 'Host video_info: '+video_info )
                 if '&token=' in video_info or '&account_playback_token=' in video_info:
                     break
         if '&token=' not in video_info and '&account_playback_token=' not in video_info:
@@ -605,9 +598,7 @@
         url_map = {}
         if len(video_info.get('url_encoded_fmt_stream_map', [])) >= 1 or len(video_info.get('adaptive_fmts', [])) >= 1:
             encoded_url_map = video_info.get('url_encoded_fmt_stream_map', [''])[0] + ',' + video_info.get('adaptive_fmts',[''])[0]
-            _supported_formats = self._supported_formats
-            if allowVP9:
-                _supported_formats.extend(['313', '271'])
+
             for url_data_str in encoded_url_map.split(','):
                 if 'index=' in url_data_str and 'index=0-0&' in url_data_str: continue
                 if 'itag=' in url_data_str and 'url=' in url_data_str:
@@ -639,13 +630,13 @@
                     if not 'ratebypass' in url_item['url']:
                         url_item['url'] += '&ratebypass=yes'
                     url_map[url_data['itag']] = url_item
-                video_url_list = self._get_video_url_list(url_map, allowVP9)
+            video_url_list = self._get_video_url_list(url_map)
    
         if video_info.get('hlsvp') and not video_url_list:
             is_m3u8 = 'yes'
             manifest_url = _unquote(video_info['hlsvp'], None)
             url_map = self._extract_from_m3u8(manifest_url, video_id)
-            video_url_list = self._get_video_url_list(url_map, allowVP9)
+            video_url_list = self._get_video_url_list(url_map)
 
         if video_info.get('player_response') and not video_url_list:
             is_m3u8 = 'yes'
@@ -653,7 +644,7 @@
             manifest = re.search('"hlsManifestUrl":"(.*?)"', manifest_url)
             if manifest: manifest_url = manifest.group(1)
             url_map = self._extract_from_m3u8(manifest_url, video_id)
-            video_url_list = self._get_video_url_list(url_map, allowVP9)
+            video_url_list = self._get_video_url_list(url_map)
 
         if not video_url_list:
             return []
@@ -759,10 +750,8 @@
             printDBG('unable to extract %s; please report this issue on http://yt-dl.org/bug' % name)
             return None
             
-    def _get_video_url_list(self, url_map, allowVP9 = False):
-        format_list = list(self._available_formats_prefer_free) # available_formats
-        if allowVP9:
-            format_list.extend(['313', '271'])
+    def _get_video_url_list(self, url_map):
+        format_list = self._available_formats_prefer_free # available_formats
         existing_formats = [x for x in format_list if x in url_map]
         
         return [(f, url_map[f]) for f in existing_formats] # All formats
