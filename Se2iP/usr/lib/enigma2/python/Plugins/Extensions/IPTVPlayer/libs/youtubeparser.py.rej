--- libs/youtubeparser.py	2019-06-06 06:20:34.242316591 +0200
+++ enigma2-pc/e2iplayerGITsSources/forks/e2iplayer-Mosz_Nowy/IPTVPlayer/libs/youtubeparser.py	2019-03-16 08:09:08.313696001 +0100
@@ -25,9 +25,8 @@
 # Config options for HOST
 ###################################################
 config.plugins.iptvplayer.ytformat        = ConfigSelection(default = "mp4", choices = [("flv, mp4", "flv, mp4"),("flv", "flv"),("mp4", "mp4")]) 
-config.plugins.iptvplayer.ytDefaultformat = ConfigSelection(default = "720", choices = [("0", _("the worst")), ("144", "144p"), ("240", "240p"), ("360", "360p"),("720", "720p"), ("1080", "1080p"), ("1440", "1440p"), ("2160", "2160p"), ("9999", _("the best"))])
+config.plugins.iptvplayer.ytDefaultformat = ConfigSelection(default = "720", choices = [("0", _("the worst")), ("144", "144p"), ("240", "240p"), ("360", "360p"),("720", "720"), ("1080", "1080"),("9999", _("the best"))])
 config.plugins.iptvplayer.ytUseDF         = ConfigYesNo(default = True)
-config.plugins.iptvplayer.ytVP9           = ConfigYesNo(default = False)
 config.plugins.iptvplayer.ytShowDash      = ConfigSelection(default = "auto", choices = [("auto", _("Auto")),("true", _("Yes")),("false", _("No"))])
 config.plugins.iptvplayer.ytSortBy        = ConfigSelection(default = "", choices = [("", _("Relevance")),("video_date_uploaded", _("Upload date")),("video_view_count", _("View count")),("video_avg_rating", _("Rating"))]) 
 
@@ -49,16 +48,8 @@
         else:
             return False
 
-    @staticmethod
-    def isVP9Allowed():
-        value = config.plugins.iptvplayer.ytVP9.value
-        printDBG("1. ALLOW VP9: >> %s" % value)
-        value = YouTubeParser.isDashAllowed() and value
-        printDBG("2. ALLOW VP9: >> %s" % value)
-        return value
-
-    def getDirectLinks(self, url, formats = 'flv, mp4', dash=True, dashSepareteList = False, allowVP9 = None):
-        printDBG("YouTubeParser.getDirectLinks")
+    def getDirectLinks(self, url, formats = 'flv, mp4', dash=True, dashSepareteList = False):
+        printDBG('YouTubeParser.getDirectLinks')
         list = []
         try:
             if self.cm.isValidUrl(url) and '/channel/' in url and url.endswith('/live'):
@@ -67,7 +58,7 @@
                     videoId = self.cm.ph.getSearchGroups(data, '''<meta[^>]+?itemprop=['"]videoId['"][^>]+?content=['"]([^'^"]+?)['"]''')[0]
                     if videoId == '': videoId = self.cm.ph.getSearchGroups(data, '''['"]REDIRECT_TO_VIDEO['"]\s*\,\s*['"]([^'^"]+?)['"]''')[0]
                     if videoId != '': url = 'https://www.youtube.com/watch?v=' + videoId
-            list = YoutubeIE()._real_extract(url, allowVP9 = allowVP9)
+            list = YoutubeIE()._real_extract(url)
         except Exception:
             printExc()
             if dashSepareteList:
@@ -86,7 +77,7 @@
             for item in list:
                 if 'mp4a' == item['ext']:
                     dashAudioLists.append(item)
-                elif item['ext'] in ('mp4v', 'webmv'):
+                elif 'mp4v' == item['ext']:
                     dashVideoLists.append(item)
                 elif 'mpd' == item['ext']:
                     tmpList = getMPDLinksWithMeta(item['url'], checkExt=False)
