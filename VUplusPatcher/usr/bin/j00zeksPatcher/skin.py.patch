--- /usr/lib/enigma2/python/skin.py.org
+++ /usr/lib/enigma2/python/skin.py
@@ -61,6 +61,7 @@
 
 config.skin = ConfigSubsection()
 config.skin.primary_skin = ConfigText(default = DEFAULT_SKIN)
+config.skin.primary_vfdskin = ConfigText(default="vfd_skin/skin_vfd.xml")
 
 profile("LoadSkin")
 try:
@@ -68,6 +69,10 @@
 except (SkinError, IOError, AssertionError), err:
 	print "not loading user skin: ", err
 
+profile("LoadSkinLCD")
+try: loadSkin("/usr/share/enigma2/" + config.skin.primary_vfdskin.value, SCOPE_CONFIG)
+except (SkinError, IOError, AssertionError), err: print "not loading LCD skin: ", err
+
 try:
 	loadSkin(config.skin.primary_skin.value)
 except (SkinError, IOError, AssertionError), err:
@@ -191,7 +196,7 @@
 		cached = "cached" in options
 	ptr = LoadPixmap(morphRcImagePath(path), desktop, cached)
 	if ptr is None:
-		raise SkinError("pixmap file %s not found!" % (path))
+		print("pixmap file %s not found!" % (path))
 	return ptr
 
 class AttributeParser:
@@ -441,7 +446,7 @@
 				colorNames[name] = parseColor(color)
 				#print "Color:", name, color
 			else:
-				raise SkinError("need color and name, got %s %s" % (name, color))
+				print("need color and name, got %s %s" % (name, color))
 
 	for c in skin.findall("fonts"):
 		for font in c.findall("font"):
@@ -783,7 +788,7 @@
 			try:
 				attributes = screen[wname].skinAttributes = [ ]
 			except:
-				raise SkinError("component with name '" + wname + "' was not found in skin of screen '" + name + "'!")
+				print("component with name '" + wname + "' was not found in skin of screen '" + name + "'!")
 				#print "WARNING: component with name '" + wname + "' was not found in skin of screen '" + name + "'!"
 
 #			assert screen[wname] is not Source
@@ -807,7 +812,7 @@
 					if scr is None:
 						#print wsource
 						#print name
-						raise SkinError("specified related screen '" + wsource + "' was not found in screen '" + name + "'!")
+						print("specified related screen '" + wsource + "' was not found in screen '" + name + "'!")
 					path = path[1:]
 
 				# resolve the source.
@@ -825,12 +830,12 @@
 					break
 
 			if source is None:
-				raise SkinError("source '" + wsource + "' was not found in screen '" + name + "'!")
+				print("source '" + wsource + "' was not found in screen '" + name + "'!")
 
 			wrender = get_attr('render')
 
 			if not wrender:
-				raise SkinError("you must define a renderer with render= for source '%s'" % (wsource))
+				print("you must define a renderer with render= for source '%s'" % (wsource))
 
 			for converter in widget.findall("convert"):
 				ctype = converter.get('type')
@@ -884,7 +889,7 @@
 			screen.onLayoutFinish.append(code)
 			#print "onLayoutFinish = ", codeText
 		else:
-			raise SkinError("applet type '%s' unknown!" % widgetType)
+			print("applet type '%s' unknown!" % widgetType)
 			#print "applet type '%s' unknown!" % type
 
 	def process_elabel(widget, context):
