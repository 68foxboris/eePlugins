#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# @j00zek 2020
#
###########################################################################################################

import os, sys

def pobierzReferencjeSAT():
    myRef = []
    if m3uEPGmode:
        pass
    return myRef
    
def znajdzReferencje(descr):
    myRef='0:1:1:0:0:0:0:0:0'
    return myRef

def importFilesFrom(sourceDir):
    for m3uFile in os.listdir(sourceDir):
        if not m3uFile.endswith('.m3u'): continue
        BFNAME = 'userbouquet.%s%s.j00zekAutobouquet.IPTV' % (m3uFile[:-4], str(FrameworkType))
        BFNAMEandPath = '/etc/enigma2/%s' % BFNAME
        m3uFileWithPath = os.path.join(sourceDir, m3uFile)
        desk_tmp = ''
        print "Import streamów z %s ..." % m3uFile[:-4]
        if os.path.isfile(BFNAMEandPath):
            os.remove(BFNAMEandPath)
        with open('/etc/enigma2/%s' % BFNAME, 'w') as outFile:
            infile = open(m3uFileWithPath, 'r')
            line = infile.readline().strip()
            if not '#EXTM3U' in line:
                print "Plik '%s' ma niepoprawny format, pomijam" % m3uFile
                break
            outFile.write('#NAME %s (%s)\n' % ( m3uFile[:-4], str(FrameworkType)))
            line = infile.readline().strip()
            descr = ''
            url = ''
            while line:
                if line.startswith('#EXTINF') and line.find(','):
                    descr = line.split(',', 1)[1].strip()
                    if m3uAddIPTVmarker == 'i':
                        ChanName = m3uAddIPTVmarker + descr
                    elif m3uAddIPTVmarker == 'IPTV':
                        ChanName = descr + ' ' + m3uAddIPTVmarker
                    else:
                        ChanName = descr
                elif line.startswith('http://'):
                    url = line.strip().replace(':', '%3a')
                #jak mamy wszystko, to zapisujemy
                if descr != '' and url != '':
                    outFile.write('#SERVICE %s:%s:%s:%s\n' %( str(FrameworkType), znajdzReferencje(descr), url, ChanName))
                    descr = ''
                    url = ''
                    ChanName = ''
                line = infile.readline().strip()
            infile.close()
            outFile.close()
        if os.path.isfile('/etc/enigma2/bouquets.tv'):
            update_bouquets_tv = True
            for line in open('/etc/enigma2/bouquets.tv'):
                if BFNAME in line:
                    update_bouquets_tv = False
                    break
            if update_bouquets_tv:
                print "Dodaję w pliku bouquets.tv definicję bukietu"
                with open('/etc/enigma2/bouquets.tv', 'a') as outfile:
                    outfile.write('#SERVICE 1:7:1:0:0:0:0:0:0:0:FROM BOUQUET "%s" ORDER BY bouquet\n' % BFNAME)
                    outfile.close()
        

if __name__ == '__main__': 
    FiltersFile = '/etc/enigma2/JB_m3u_sections.cfg'
    #zdefiniowane we wtyczce (w kolejnośc definicji
    m3uMode          = 'NA'
    m3uFile          = '/'
    m3uURL           = '/'
    m3uURLkeep       = False
    FrameworkType    = 4097
    m3uSplitMode     = False
    m3uFilter        = False
    m3uProxy         = "proxyOFF"
    m3uAddIPTVmarker = "markerOFF"
    m3uEPGmode       = False
    
    
    

    
    if len(sys.argv) - 1 >= 4:
        m3uFile = sys.argv[1]
        FrameworkType   = int(sys.argv[2])
        if sys.argv[3].lower() == 'true': m3uSplitMode = True
        if sys.argv[4].lower() == 'true': m3uFilter = True
        m3uProxy = sys.argv[5]
        m3uAddIPTVmarker = sys.argv[6]
        if sys.argv[7].lower() == 'true': m3uEPGmode = True
    elif os.path.exists('/etc/enigma2/settings'):
        with open('/etc/enigma2/settings', 'r') as f:
            for line in f:
                line = line.strip()
                if line.startswith('config.plugins.j00zek.m3uMode='):
                    m3uMode = line.split('=')[1]
                elif line.startswith('config.plugins.j00zek.m3uURL='):
                    m3uURL = line.split('=')[1]
                elif line.startswith('config.plugins.j00zek.m3uURLkeep=true'):
                    m3uURLkeep = True
                elif line.startswith('config.plugins.j00zek.m3ufile='):
                    m3uFile = line.split('=')[1]
                elif line.startswith('config.plugins.j00zek.FrameworkType='):
                    FrameworkType = line.split('=')[1]
                elif line.startswith('config.plugins.j00zek.m3uSplitMode=true'):
                    m3uSplitMode  = True
                elif line.startswith('config.plugins.j00zek.m3uFilter=true'):
                    m3uFilter = True
                elif line.startswith('config.plugins.j00zek.m3uProxy='):
                    m3uProxy = line.split('=')[1]
                elif line.startswith('config.plugins.j00zek.m3uAddIPTVmarker='):
                    m3uAddIPTVmarker = line.split('=')[1]
                elif line.startswith('config.plugins.j00zek.m3uEPGmode=true'):
                    m3uEPGmode = True
            f.close()
            if m3uURLkeep and m3uMode == 'url' and os.path.exists(m3uURL.replace('.url','.m3u').replace('//','/')):
                m3uFile = m3uURL.replace('.url','.m3u').replace('//','/')
    else:
        print "BŁĄD: za mało parametrów"
        quit()

    if not os.path.exists(m3uFile):
        print "Brak pliku źródłowego '%s'" % m3uFile
        quit()
    else:
        with open(m3uFile, 'r') as file:
            line = file.readline().strip()
            print line
            file.close()
            if not '#EXTM3U' in line:
                print "Plik '%s' ma niepoprawny format !!!" % m3uFile
                quit()
            
    print "Dane wejściowe:"
    print "Nazwa pliku: %s" % m3uFile
    print "FrameworkType: %s" % FrameworkType
    print "Oddzielne bukiety dla sekcji: %s" % str(m3uSplitMode).replace('False','Nie').replace('True','Tek')
    print "Filtrowanie sekcji: %s" % str(m3uFilter).replace('False','Nie').replace('True','Tek')
    print "Ustawienia Proxy: %s" % m3uProxy.replace('proxyOFF','Nie')
    print "Marker w nazwie: %s" % m3uAddIPTVmarker.replace('markerOFF','Nie')
    print "Ustawienia EPG: %s" % str(m3uEPGmode).replace('True','Korzystaj z referencji SAT').replace('False','Standardowe dla IPTV')
    #
    ReferencjeSAT = pobierzReferencjeSAT()
    aktywneSekcje = []
    markerySekcji = []
    if m3uSplitMode or m3uFilter:
        if os.path.exists(FiltersFile):
            with open(FiltersFile, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line.startswith('#'): continue
                    elif line == '': continue
                    elif line.find('['):
                        aktywneSekcje.append(line)
                        markerySekcji.append(line.split('[')[0])
                f.close()
            print "załadowane markery sekcji:", markerySekcji
        if len(markerySekcji) == 0 and m3uSplitMode:
            print "Nie znaleziono markerów sekcji, podział pliku jest niemożliwy"
            quit()
        elif len(markerySekcji) == 0 and m3uFilter:
            print "Nie znaleziono markerów sekcji, filtrowanie jest niemożliwe"
            quit()
    
    os.system('mkdir -p /tmp/JB/')
    if m3uFilter:
        pass
    elif m3uSplitMode:
        pass
    else:
        with open( '/tmp/JB/%s' % os.path.basename(m3uFile), 'w') as outfile:
            with open(m3uFile, 'r') as infile:
                for line in infile:
                    outfile.write(line)
    importFilesFrom('/tmp/JB/')
    os.system('rm -rf /tmp/JB/')
